{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome Verteilen Documentation","text":"<p>Verteilen is a cluster computing application which provide friendly user interface to control with</p>"},{"location":"#application-info","title":"Application info","text":"<ul> <li>Platform Support: Windows / Linux</li> <li>Programming Language: Typescript</li> <li>Framework: NodeJS, Electron, Vue, Vuetify</li> <li>Script Language: JS</li> <li>Author: Elly</li> </ul>"},{"location":"dev/installation/","title":"Installation","text":"<p>You must join the verteilen dev team to access the source code</p>"},{"location":"dev/installation/#setup","title":"Setup","text":"<p>User below commands to setup the project folder</p> <pre><code>git clone https://github.com/Verteilen/Verteilen.git\ncd Verteilen\nbun install\nbun dev\n</code></pre> <p>After the build is setup, you can use below commands to do sort of things</p>"},{"location":"dev/installation/#quick-dev-actions","title":"Quick Dev Actions","text":"<p>Open electron debug mode with Hot reload</p> <pre><code>npm run dev\n</code></pre> <p>Host static web</p> <pre><code>npm run web\n</code></pre> <p>Open express server and hosting it as backend</p> <pre><code>npm run express\n</code></pre> <p>Compute node build</p> <pre><code>npm run build:node\nnpm run docker:node-f\n</code></pre> <p>Compute server build</p> <pre><code>npm run build:server\nnpm run docker:server-f\n</code></pre>"},{"location":"dev/structure/","title":"Project Structure","text":"<pre><code>---\ntitle: Overview\n---\ngraph LR\n    A{share codebase} --&gt;|copy to| B[Program]\n    A --&gt;|copy to| C[Compute Node]\n    A --&gt;|copy to| D[Web]\n    A --&gt;|copy to| E[Electron]\n    A --&gt;|copy to| F[Express]\n    B --&gt;|build| G((EXE))\n    G -.-&gt;|needs| C\n    G -.-&gt;|needs| E\n    G -.-&gt;|needs| F\n    D --&gt;|build| H((HTML))\n    E --&gt;|build| I((msi, deb Files))\n    F --&gt;|build| J((NodeJS Files))\n    style G fill:#f7d899\n    style H fill:#f7d899\n    style I fill:#f7d899\n    style J fill:#f7d899\n    style A fill:#eccafc</code></pre>"},{"location":"dev/structure/#share","title":"Share","text":"<p>It's a codebase which share in different application</p> <p>Source code path location</p> <p>It's locate at src/share</p> <p>\"Share\" Action</p> <p>Which start copy the code into different folder <pre><code>npm run share\n</code></pre></p> <p>Modify Notice</p> <p>So if you want to modify the core logic You should modify the content in the src/share  Example:  If you edit the code in src/main/client/....  After share command, your modify action will be gone</p>"},{"location":"dev/structure/#worker","title":"Worker","text":"<p>The executable program which run the task logic on it. This program is called by runner. In order to implement multithread logic in NodeJS environment</p> <p>Source code path location</p> <p>It's locate at src/program The program entry point is src/program/worker.ts</p> <p>Build program</p> <p>Use command below to package the program to executable file <pre><code># Build exe depend on current os\nnpm run pkg\n# Build worker.exe which run on windows\nnpm run pkg win\n# Build worker.exe which run on mac\nnpm run pkg mac\n# Build worker.exe which run on linux\nnpm run pkg linux\n</code></pre> The output will locate at ./bin folder</p> <p>Clean build application warning</p> <p>If you have multiple executable in the bin folder  And you build the electron application or express application  They will copy the entire bin folder, which means it will copy the unnecessary files to output  Make sure delete bin folder before build any runner application</p>"},{"location":"dev/structure/#runner","title":"Runner","text":""},{"location":"dev/structure/#static-web","title":"Static Web","text":"<p>Simple task management host by browser, which it close when user close browser  It's unreliable you could said, But easy deploy</p> <p>Notices:</p> <ul> <li> Backend</li> <li> Playground</li> <li> Authentication</li> </ul> <p>Source code path location</p> <p>It's locate at src/renderer</p> <p>Build html</p> <p>Use command below to use vite package the renderer to html files <pre><code># Output html files\nnpm run build:web\n</code></pre> The output will locate at ./build/renderer folder</p>"},{"location":"dev/structure/#electron-application","title":"Electron Application","text":"<p>Notices:</p> <ul> <li> Backend</li> <li> Playground</li> <li> Authentication</li> </ul> <p>Source code path location</p> <p>Frontend locate at src/renderer Backend locate at src/main</p> <p>Build electron</p> <p>Use command below to package the electron app to installation files <pre><code># Build electron app depend on current os\nnpm run build\n# Build electron app which run on windows (.msi)\nnpm run build:win\n# Build electron app which run on mac\nnpm run build:mac\n# Build electron app which run on linux (.deb)\nnpm run build:linux\n</code></pre> The output will locate at ./dist folder</p>"},{"location":"dev/structure/#express-server","title":"Express Server","text":"<p>Notices:</p> <ul> <li> Backend</li> <li> Playground</li> <li> Authentication</li> </ul> <p>It's nodejs express server which hosting the backend</p> <p>Source code path location</p> <p>Frontend locate at src/renderer Backend locate at src/server</p> <p>Build express</p> <p>Use command below to package the express to nodejs deploy files <pre><code># Output nodejs files\nnpm run build:server\n</code></pre> The output will locate at ./build/server folder</p>"},{"location":"dev/structure/#compute-node","title":"Compute Node","text":"<p>It's the client side application, it recevied server signal and do the calculation then return the info etc...  It runs without user interface</p> <p>Source code path location</p> <p>It's locate at src/node</p> <p>Build node</p> <p>Use command below to package the express to nodejs deploy files <pre><code># Output nodejs files\nnpm run build:node\n</code></pre> The output will locate at ./build/node folder</p>"},{"location":"user/console/","title":"Console","text":""},{"location":"user/core/","title":"Concept","text":"<p>Let say for example, you have 5 power computers, And a project so big which require days to finish its works  Such as 3D Rendering, or Video transcoding, or Large data sorting.</p> <p>Sure, You can keep vertical scaling, until it's too expensive to do it. when you hit the critical point.  You might considering horizontal scaling, which now you need a way to manage multiple computers</p>"},{"location":"user/core/#use-blender-for-example","title":"Use Blender For Example","text":"<p>Let say there is a video file needs to export to mp4 file, video length is near 1 hour and the scene contain VFX or fluid computing</p> <p>In this case you can seperate the render to multiple fragment, 5 mins per .mp4 file  In the end, you output folder will contain multiple videos</p> <p>During the renderering, you can tell multiple computers to render different timespan  Then combine them in the end</p>"},{"location":"user/example/","title":"Example Template","text":"<p>The purpose of this template is to show all the features this application support</p> Compute Guide   ## Function Call  ## JS Script  ## CronJob  ## CronJob + Multicore"},{"location":"user/installation/","title":"Installation","text":""},{"location":"user/installation/#static-web","title":"Static Web","text":"<p>Which you do not need to install anything, you can just click here to use it</p> <p>No Advanced Features</p> <p>Static Web mode means there is no backend attach to it  It will only contain core feature</p> <p>Browser Cannot Close</p> <p>You cannot close browser, before your task finish  All the compute node will disconnect, because all the websocket instance is hold in the browser code</p>"},{"location":"user/installation/#compute-node-install","title":"Compute Node Install","text":"<p>Install the nodejs module in the global for compute node  use npm install the compute tool node</p> <pre><code>npm install -g verteilen_node\n# use command ctn to start the client\nverteilen_node\n</code></pre> <p>First time running</p> <p>If you're running verteilen_node the first time  It will trying to download the worker executable first</p>"},{"location":"user/installation/#desktop-app-install","title":"Desktop App Install","text":"<p>In Release page</p> <ul> <li>For windows user click .msi installation file</li> <li>For linux user click .deb installation file</li> </ul>"},{"location":"user/installation/#docker-install","title":"Docker Install","text":"<p>Here is the quick deploy for compute node docker container</p> <pre><code>docker run --restart=always -p 12080:12080 --name verteilen_node0 e87870823/verteilen_node\n</code></pre> <p>Here is the quick deploy for compute server docker container</p> <pre><code>docker run --restart=always -p 11080:11080 -p 11777:11777 --name verteilen_server0 e87870823/verteilen_server\n</code></pre>"},{"location":"user/job/","title":"Job","text":""},{"location":"user/parameter/","title":"Parameter","text":""},{"location":"user/project/","title":"Project","text":"<p>A container which holds the information about the tasks schedule configuration</p>"},{"location":"user/project/#overview","title":"Overview","text":"<p>For manage the project, you want to enter the project page</p> <p></p> <p>In this page, you can do everything in the action bar</p> <ul> <li>Added project</li> <li>Export project</li> <li>Select all project</li> <li>etc...</li> </ul> <p>The buttons itself contain popup menu, so it should be fine to read them</p> <p></p> <p>Click the UUID to quickly enter the task scheduler manage page</p> <p></p>"},{"location":"user/project/#add-new-project","title":"Add New Project","text":"<p>Let's Trying to added a project</p> <p> </p> <p>As you can see, you must enter the name, otherwise the menu will not accept</p> <p></p> <p>Next, We can choose template for the task schedule as well  if you did not choose, this will create a blank project with 0 task in it</p> <p></p> <p>The template select menu here, you can open the group, choose the one  Once anything is select, confirm button will light up  It means it's good to go</p> <p></p> <p>The template button will change the text to which one you select</p> <p></p> <p>You can choose the default binding parameter in here as well</p> <p></p> <p>After finish, you hit \"create\"  The list popup the one you just create, and once there is 2 items in the list  You can actually change its order</p> <p>The order</p> <p>You can change to order, but if you have any sorting config in place  You will not see the order change  So if you want to change the order, make sure you cancel the sorting setting first</p> <p></p>"},{"location":"user/task/","title":"Task","text":""},{"location":"user/task/#overview","title":"Overview","text":"<p>The task page location</p> <p></p> <p>Toolbar layout</p> <p></p>"},{"location":"user/task/#add-new-task","title":"Add New Task","text":"<p>Click button to add task</p> <p></p> <p>As you can see, you must enter the name, otherwise the menu will not accept</p> <p></p> <p></p> <p>You can choose it to be setup job type  Which it's the task run in every nodes once</p> <p></p> <p>Or you can choose distribute, which let this be a cronjob type  It will generate a number of subtask that use every nodes to finish it</p> <p>Execute Order</p> <p>No It does not have order like, first node run first job, second node run second job  As long as the node finish the current subtask, it will fetch the next unfinish subtask  It run as quickly as possible</p> <p> </p> <p>With multicore checked, One node can have multiple subtask execute at the same time</p> <p>Compute Heavy</p> <p>If your task have cpu or gpu heavy compute task  We recommand you not to check this  It should be use on the lightweight task such as transcoding or formating json etc...</p> <p></p> <p>New update </p> <ul> <li>Decide that the display should change to single row, It's eaiser to read</li> </ul> <p></p>"},{"location":"user/task/#binding","title":"Binding","text":"<p>It's a project binding parameter, It's just a default binding to a data vault  You can actually leave this empty, You can assign it in the console page as well</p> <ul> <li>Click green text to jump to parameter setting menu </li> <li>Click dotted box to select other parameter</li> </ul> <p></p> <ul> <li>Click None to unbind</li> <li>Click other to change binding</li> </ul> <p></p> <p>This is what you see when project is binding to nothing</p> <p></p>"},{"location":"user/workflow/","title":"Workflow","text":"<p>This is the entire project content, which contain several layers</p> <pre><code>---\ntitle: Overview\n---\nflowchart LR\n    A[Project] -.-&gt;|1| B[Parameter]\n    A --&gt;|N| C[Task]\n    C --&gt;|N| D[Job]</code></pre>"},{"location":"user/workflow/#project","title":"Project","text":"<p>The project container, you can put name and description in here, just easy to manage.</p>"},{"location":"user/workflow/#task","title":"Task","text":"<p>This probably the most important part, defining tasks  A project can have multiple task  Every task can have different flags  Currently Verteilen support 3 flags</p> <ul> <li>No Flags</li> <li>Setup</li> <li>Cluster</li> <li>Multithread</li> </ul> <p>No Flag Scenario</p> <p>The backend will pick only one compute node, and run the task, then it will mark it as finish</p> <pre><code>---\ntitle: scenario\n---\nflowchart LR\n    Z[Task] --&gt; Z0{No Flags}\n    Z[Task] --&gt; Z1{Setup}\n    Z[Task] --&gt; Z2{Cluster}\n    Z[Task] --&gt; Z3{Multithread}\n    Z0 --&gt;|Generate| A0[1 x Subtask]\n    Z1 --&gt;|Generate| A1[1 x Subtask]\n    Z2 --&gt;|Generate| A2[(N x Subtasks)]\n    Z3 --&gt;|Generate| A3[(N x Subtasks)]\n    A0 --&gt; B0(One Node Run Once)\n    A1 --&gt; B1(All Node Run Once)\n    A2 --&gt; B2(Run by Node Pool)\n    A3 --&gt; B3(Run by Node Pool &lt;br /&gt;Run 2+ subtask at one node)</code></pre>"},{"location":"user/workflow/#setup","title":"Setup","text":"<p>You want every compute node run once</p> <p>Compute Node Offline Scenario</p> <p>If one of the compute node is offline, backend will keep waiting for it to back online to do the task</p>"},{"location":"user/workflow/#cluster","title":"Cluster","text":"<p>Base on the input number, it will create a queue, and run it one by one, until all the subtask finish  Subtesk create base on the input number, if input is 5, then it will have 5 subtask create</p>"},{"location":"user/workflow/#multithread","title":"Multithread","text":"<p>Base on the input number, It will set the thread running upper-limit for a single compute node  If the input is 4, and if cluster flag is on as well, then a single node can run 4 subtasks at once</p> <p>This is useful for low compute task such as small file converting or apply metadata for a video file</p>"},{"location":"user/workflow/#job","title":"Job","text":"<p>The content of the task  A task can have multiple jobs</p> <p>By the way, Verteilen currently support use Javascript VM to write the logic here</p>"},{"location":"user/workflow/#expression","title":"Expression","text":""},{"location":"user/workflow/#parameter","title":"Parameter","text":""}]}